services:
  postgres-db:
    image: ${POSTGRES_IMAGE:-public.ecr.aws/docker/library/postgres:14.15-alpine3.21}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: "${POSTGRES_HEALTHCHECK_INTERVAL:-1s}"
      timeout: "${POSTGRES_HEALTHCHECK_TIMEOUT:-5s}"
      retries: ${POSTGRES_HEALTHCHECK_RETRIES:-10}
    volumes:
      - ${POSTGRES_VOLUME:-postgres_data}:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:${POSTGRES_TARGET_PORT:-5432}"

  natiq-api:
    image: ${API_IMAGE:-natiqquran/nq-api:latest}
    container_name: ${API_CONTAINER_NAME:-natiq-api}
    ports:
      - "${API_PORT:-8001}:${API_TARGET_PORT:-80}"
    depends_on:
      - postgres-db
      - forced-alignment
      - rabbitmq
    volumes:
      - ${NATIQ_API_STATIC_VOLUME:-static}:/app/staticfiles
    environment: &default_env
      SECRET_KEY: "${SECRET_KEY:-bruh}"
      DEBUG: "${DEBUG:-1}"
      DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL:-info}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost}
      DJANGO_CORS_ALLOWED_ORIGINS: ${DJANGO_CORS_ALLOWED_ORIGINS:-*}
      DJANGO_CORS_ALLOWED_ALL_ORIGINS: "${DJANGO_CORS_ALLOWED_ALL_ORIGINS:-1}"
      CSRF_TRUSTED_ORIGINS: "${CSRF_TRUSTED_ORIGINS:-http://localhost:8001}"
      DATABASE_NAME: ${DATABASE_NAME:-postgres}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-password}
      DATABASE_HOST: ${DATABASE_HOST:-postgres-db}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      FORCED_ALIGNMENT_API_URL: "${FORCED_ALIGNMENT_API_URL:-http://forced-alignment:5000}"
      FORCED_ALIGNMENT_SECRET_KEY: "${FORCED_ALIGNMENT_SECRET_KEY:-bruh}"
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-rabbitmq}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-your_access_key}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-your_secret_key}
      AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL:-http://example.com}

  nginx:
    image: ${NGINX_IMAGE:-nginx:latest}
    ports:
      - "${NGINX_PORT:-80}:${NGINX_TARGET_PORT:-80}"
    volumes:
      - ${NGINX_CONF_PATH:-./nginx.conf}:/etc/nginx/nginx.conf:ro
      - ${NGINX_STATIC_VOLUME:-static}:/static:ro
    depends_on:
      - natiq-api

  forced-alignment:
    image: ${ALIGNMENT_IMAGE:-natiqquran/forced-alignment}
    container_name: ${ALIGNMENT_CONTAINER_NAME:-forced-alignment}
  
  rabbitmq:
    image: ${RABBITMQ_IMAGE:-rabbitmq:3-management}
    container_name: ${RABBITMQ_CONTAINER_NAME:-nq-rabbitmq}
    ports:
      - "${RABBITMQ_PORT:-5672}:${RABBITMQ_TARGET_PORT:-5672}"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:${RABBITMQ_MANAGEMENT_TARGET_PORT:-15672}"
    volumes:
      - ${RABBITMQ_VOLUME:-rabbitmq_data}:/var/lib/rabbitmq/mnesia
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}

  celery:
    restart: always
    image: ${CELERY_IMAGE:-natiqquran/nq-api:latest}
    entrypoint: ${CELERY_ENTRYPOINT:-celery}
    command: -A ${CELERY_APP_NAME:-api} worker -l ${CELERY_LOGLEVEL:-info}
    environment: *default_env
    depends_on:
      - postgres-db
      - rabbitmq
      - natiq-api

volumes:
  postgres_data:
  static:
  rabbitmq_data:
